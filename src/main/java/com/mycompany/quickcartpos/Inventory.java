/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.quickcartpos;

import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.math.*;

/**
 *
 * @author HP
 */
public class Inventory extends javax.swing.JFrame {

    private JTable inventoryTable;
    private DefaultTableModel tableModel;
    private static final String jdbcUrl = "jdbc:mysql://localhost:3306/quickcartdb";
    private static final String usernameDB = "root";
    private static final String passwordDB = "root123";
    private Connection connection;

    /**
     * Creates new form Inventory
     */
    public Inventory() {
        initComponents();
        initTable();
        connectToDatabase();
    }

    private void connectToDatabase() {
        try {
            connection = DriverManager.getConnection(jdbcUrl, usernameDB, passwordDB);
            System.out.println("Connected to the database");
        } catch (SQLException e) {
            System.err.println("Error connecting to the database: " + e.getMessage());
        }
    }

    private void initTable() {
        String[] columnNames = {"ID", "Name", "Barcode", "Quantity", "Price"};
        tableModel = new DefaultTableModel(null, columnNames);
        inventoryTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(inventoryTable);
        add(scrollPane);
    }

    private void addRowToDatabase(String name, String barcode, int quantity, BigDecimal price) {
        try {
            String query = "INSERT INTO Inventory (name, barcode, quantity, price) VALUES (?, ?, ?, ?)";
            try ( PreparedStatement pstmt = connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
                pstmt.setString(1, name);
                pstmt.setString(2, barcode);
                pstmt.setInt(3, quantity);
                pstmt.setBigDecimal(4, price);
                pstmt.executeUpdate();

                try ( ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        int generatedId = generatedKeys.getInt(1);
                        System.out.println("Generated ID: " + generatedId);
                    } else {
                        System.err.println("Failed to retrieve generated ID.");
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Error adding row to the database: " + e.getMessage());
        }
    }

    private void addRowToTable(String id, String name, String barcode, String quantity, String price) {
        tableModel.addRow(new Object[]{id, name, barcode, quantity, price});
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AppNamePanel = new javax.swing.JPanel();
        QuickCartLabel = new javax.swing.JLabel();
        MenuPanel = new javax.swing.JPanel();
        AddItemButton = new javax.swing.JLabel();
        DeleteItemButton = new javax.swing.JLabel();
        EditItemButton = new javax.swing.JLabel();
        UpdateItemQButton = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AppNamePanel.setBackground(new java.awt.Color(174, 102, 183));

        QuickCartLabel.setFont(new java.awt.Font("Stencil", 0, 48)); // NOI18N
        QuickCartLabel.setForeground(new java.awt.Color(255, 255, 255));
        QuickCartLabel.setText("QuickCart");

        org.jdesktop.layout.GroupLayout AppNamePanelLayout = new org.jdesktop.layout.GroupLayout(AppNamePanel);
        AppNamePanel.setLayout(AppNamePanelLayout);
        AppNamePanelLayout.setHorizontalGroup(
            AppNamePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(AppNamePanelLayout.createSequentialGroup()
                .add(335, 335, 335)
                .add(QuickCartLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 281, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(499, Short.MAX_VALUE))
        );
        AppNamePanelLayout.setVerticalGroup(
            AppNamePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, AppNamePanelLayout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .add(QuickCartLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(45, 45, 45))
        );

        MenuPanel.setBackground(new java.awt.Color(213, 190, 216));

        AddItemButton.setBackground(new java.awt.Color(255, 255, 255));
        AddItemButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AddItemButton.setText("Add Item");
        AddItemButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 20, 118)));
        AddItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddItemButtonMouseClicked(evt);
            }
        });

        DeleteItemButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DeleteItemButton.setText("Delete Item");
        DeleteItemButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 20, 118)));
        DeleteItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteItemButtonMouseClicked(evt);
            }
        });

        EditItemButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        EditItemButton.setText("Edit Item");
        EditItemButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 20, 118)));

        UpdateItemQButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        UpdateItemQButton.setText("Update Item Quantity");
        UpdateItemQButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 20, 118)));

        org.jdesktop.layout.GroupLayout MenuPanelLayout = new org.jdesktop.layout.GroupLayout(MenuPanel);
        MenuPanel.setLayout(MenuPanelLayout);
        MenuPanelLayout.setHorizontalGroup(
            MenuPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, MenuPanelLayout.createSequentialGroup()
                .addContainerGap(952, Short.MAX_VALUE)
                .add(MenuPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(UpdateItemQButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(DeleteItemButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(EditItemButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(AddItemButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(43, 43, 43))
        );
        MenuPanelLayout.setVerticalGroup(
            MenuPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MenuPanelLayout.createSequentialGroup()
                .addContainerGap(53, Short.MAX_VALUE)
                .add(AddItemButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(DeleteItemButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(EditItemButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(UpdateItemQButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(141, 141, 141))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MenuPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(AppNamePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(AppNamePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(MenuPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void AddItemButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddItemButtonMouseClicked
        JTextField nameField = new JTextField();
        JTextField barcodeField = new JTextField();
        JTextField quantityField = new JTextField();
        JTextField priceField = new JTextField();

        // Create a panel to hold the text fields
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(4, 2));
        inputPanel.add(new JLabel("Name:"));
        inputPanel.add(nameField);
        inputPanel.add(new JLabel("Barcode:"));
        inputPanel.add(barcodeField);
        inputPanel.add(new JLabel("Quantity:"));
        inputPanel.add(quantityField);
        inputPanel.add(new JLabel("Price:"));
        inputPanel.add(priceField);

        int result = JOptionPane.showConfirmDialog(null, inputPanel, "Enter Item Information", JOptionPane.OK_CANCEL_OPTION);

        if (result == JOptionPane.OK_OPTION) {
            String name = nameField.getText();
            String barcode = barcodeField.getText();
            int quantity = Integer.parseInt(quantityField.getText());
            BigDecimal price = new BigDecimal(priceField.getText());

            if (name.isEmpty() || barcode.isEmpty() || quantity < 0 || price.compareTo(BigDecimal.ZERO) < 0) {
                JOptionPane.showMessageDialog(null, "Please enter valid information.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            addRowToDatabase(name, barcode, quantity, price);
            JOptionPane.showMessageDialog(null, "Item Added Successfully");
        }
    }//GEN-LAST:event_AddItemButtonMouseClicked

    private void DeleteItemButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteItemButtonMouseClicked
        String deletedRow = JOptionPane.showInputDialog("Enter id of item you want to Delete");
        if (inventoryTable.getSelectedRow() >= 0) {
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                String id = tableModel.getValueAt(i, 0).toString();
                if (id.equals(deletedRow)) {
                    tableModel.removeRow(i);
                    deleteItemFromDatabase(id);
                    break;
                }
            }
        }
    }//GEN-LAST:event_DeleteItemButtonMouseClicked

    private void deleteItemFromDatabase(String id) {
        try {
            String query = "DELETE FROM Inventory WHERE id = ?";
            try ( PreparedStatement pstmt = connection.prepareStatement(query)) {
                pstmt.setInt(1, Integer.parseInt(id));
                pstmt.executeUpdate();
            }
        } catch (SQLException e) {
            System.err.println("Error deleting item from the database: " + e.getMessage());
        }
    }

    private void EditItemButtonMouseClicked(java.awt.event.MouseEvent evt) {
        if (inventoryTable.getSelectedRow() >= 0) {
            int selectedIndex = inventoryTable.getSelectedRow();
            String id = (String) tableModel.getValueAt(selectedIndex, 0);
            String newName = JOptionPane.showInputDialog(null, "Enter New Name: ");
            String newBarcode = JOptionPane.showInputDialog(null, "Enter New Barcode: ");
            int newQuantity = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter New Quantity: "));
            BigDecimal newPrice = new BigDecimal(JOptionPane.showInputDialog(null, "Enter New Price: "));

            updateItemInDatabase(id, newName, newBarcode, newQuantity, newPrice);

            tableModel.setValueAt(newName, selectedIndex, 1);
            tableModel.setValueAt(newBarcode, selectedIndex, 2);
            tableModel.setValueAt(newQuantity, selectedIndex, 3);
            tableModel.setValueAt(newPrice, selectedIndex, 4);

            JOptionPane.showMessageDialog(null, "Item Updated Successfully!");
        }
    }

    private void updateItemInDatabase(String id, String name, String barcode, int quantity, BigDecimal price) {
        try {
            String query = "UPDATE Inventory SET name = ?, barcode = ?, quantity = ?, price = ? WHERE id = ?";
            try ( PreparedStatement pstmt = connection.prepareStatement(query)) {
                pstmt.setString(1, name);
                pstmt.setString(2, barcode);
                pstmt.setInt(3, quantity);
                pstmt.setBigDecimal(4, price);
                pstmt.setInt(5, Integer.parseInt(id));
                pstmt.executeUpdate();
            }
        } catch (SQLException e) {
            System.err.println("Error updating item in the database: " + e.getMessage());
        }
    }

    private void UpdateItemQButtonMouseClicked(java.awt.event.MouseEvent evt) {
        if (inventoryTable.getSelectedRow() >= 0) {
            int selectedIndex = inventoryTable.getSelectedRow();
            try {
                String itemsSoldString = JOptionPane.showInputDialog(null, "Enter number of Items sold");
                String itemsAddedString = JOptionPane.showInputDialog(null, "Enter number of Items you want to add");
                int itemsSold = Integer.parseInt(itemsSoldString);
                int itemsAdded = Integer.parseInt(itemsAddedString);
                int currentQuantity = (int) tableModel.getValueAt(selectedIndex, 3);
                int updatedQuantity = currentQuantity + itemsAdded - itemsSold;
                tableModel.setValueAt(updatedQuantity, selectedIndex, 3);

                String itemId = (String) tableModel.getValueAt(selectedIndex, 0);
                updateQuantityInDatabase(itemId, updatedQuantity);

                JOptionPane.showMessageDialog(null, "Item Quantity Updated Successfully!");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter a valid integer for Items sold and Items added.");
            }
        }
    }

    private void updateQuantityInDatabase(String id, int quantity) {
        try {
            String query = "UPDATE Inventory SET quantity = ? WHERE id = ?";
            try ( PreparedStatement pstmt = connection.prepareStatement(query)) {
                pstmt.setInt(1, quantity);
                pstmt.setInt(2, Integer.parseInt(id));
                pstmt.executeUpdate();
            }
        } catch (SQLException e) {
            System.err.println("Error updating quantity in the database: " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inventory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddItemButton;
    private javax.swing.JPanel AppNamePanel;
    private javax.swing.JLabel DeleteItemButton;
    private javax.swing.JLabel EditItemButton;
    private javax.swing.JPanel MenuPanel;
    private javax.swing.JLabel QuickCartLabel;
    private javax.swing.JLabel UpdateItemQButton;
    // End of variables declaration//GEN-END:variables
}
